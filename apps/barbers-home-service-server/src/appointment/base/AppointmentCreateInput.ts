/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  IsOptional,
  IsString,
  MaxLength,
  ValidateNested,
  IsEnum,
} from "class-validator";
import { Type } from "class-transformer";
import { PaymentCreateNestedManyWithoutAppointmentsInput } from "./PaymentCreateNestedManyWithoutAppointmentsInput";
import { ReviewCreateNestedManyWithoutAppointmentsInput } from "./ReviewCreateNestedManyWithoutAppointmentsInput";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";
import { EnumAppointmentStatus } from "./EnumAppointmentStatus";

@InputType()
class AppointmentCreateInput {
  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  appointmentTime?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  barber?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  customer?: string | null;

  @ApiProperty({
    required: false,
    type: () => PaymentCreateNestedManyWithoutAppointmentsInput,
  })
  @ValidateNested()
  @Type(() => PaymentCreateNestedManyWithoutAppointmentsInput)
  @IsOptional()
  @Field(() => PaymentCreateNestedManyWithoutAppointmentsInput, {
    nullable: true,
  })
  payments?: PaymentCreateNestedManyWithoutAppointmentsInput;

  @ApiProperty({
    required: false,
    type: () => ReviewCreateNestedManyWithoutAppointmentsInput,
  })
  @ValidateNested()
  @Type(() => ReviewCreateNestedManyWithoutAppointmentsInput)
  @IsOptional()
  @Field(() => ReviewCreateNestedManyWithoutAppointmentsInput, {
    nullable: true,
  })
  reviews?: ReviewCreateNestedManyWithoutAppointmentsInput;

  @ApiProperty({
    required: false,
    type: () => ServiceWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ServiceWhereUniqueInput)
  @IsOptional()
  @Field(() => ServiceWhereUniqueInput, {
    nullable: true,
  })
  service?: ServiceWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    enum: EnumAppointmentStatus,
  })
  @IsEnum(EnumAppointmentStatus)
  @IsOptional()
  @Field(() => EnumAppointmentStatus, {
    nullable: true,
  })
  status?: "Option1" | null;
}

export { AppointmentCreateInput as AppointmentCreateInput };
